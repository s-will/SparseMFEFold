{"name":"SparseMFEFold","tagline":"Space-efficient sparse minimum free energy prediction of RNA secondary structure","body":"============================================================\r\nSparseMFEFold\r\n============================================================\r\n\r\n------------------------------------------------------------\r\nSpace-efficient sparse MFE folding of RNAs with sparse traceback\r\n------------------------------------------------------------\r\n\r\nImplementation of the method presented in the manuscript Sparse RNA\r\nfolding revisited: space-efficient minimum free energy structure\r\nprediction by Sebastian Will and Hosna Jabbari\r\n\r\nSoftware written by Sebastian Will\r\n\r\n\r\nThe program demonstrates space-efficient sparsification including\r\ntrace-back of an RNA (loop-based) free energy minimization algorithm,\r\nwhich performs RNA folding equivalent to RNAfold -d0.\r\n\r\nTrace-back from a space efficiently sparsified algorithm is\r\nnon-trivial, since the DP-matrices are never completely stored during\r\nthe forward evaluation of the DP recursions. Thus, the trace-back\r\nrequires recomputation. However, since many matrix entries can not be\r\nefficiently recomputed in trace back, we store trace arrows to such\r\nentries. To save space, trace arrows are gc'ed and trace arrows to\r\ncandidates are omitted and reconstructed in trace back.\r\n\r\n\r\n\r\nInstallation\r\n========================================\r\n\r\nPlease install from source. The package is easy to compile and install via autotool's ./configure; make; make install.\r\n\r\nDependencies: RNA library of the Vienna RNA package 2.x\r\n\r\nHelp\r\n========================================\r\n\r\nUsage: sparsemfefold[options] [sequence]\r\n\r\nRead RNA sequence from stdin or cmdline; predict minimum\r\nfree energy and optimum structure using the time- and\r\nspace-efficient MFE RNA folding algorithm of Will and\r\nJabbari, 2015. The results are equivalent to RNAfold -d0,\r\nbut the computation takes less time (for long sequences) and\r\nmuch less space.\r\n\r\n  -h, --help             Print help and exit\r\n  -V, --version          Print version and exit\r\n  -v, --verbose          Turn on verbose output\r\n  -m, --mark-candidates  Represent candidate base pairs \r\n                         by square brackets\r\n\r\nThe input sequence is read from standard input, unless it is\r\ngiven on the command line.\r\n\r\n\r\nExamples\r\n========================================\r\n\r\nCall with sequence from stdin in default mode\r\n(compatible with RNAfold -d0)\r\n----------------------------------------\r\n$ echo UAACUUAGGGGUUAAAGUUGCAGAUUGUGGCUCUGAAAACACGGGUUCGAA \\\r\n       | SparseMFEFold      \r\nUAACUUAGGGGUUAAAGUUGCAGAUUGUGGCUCUGAAAACACGGGUUCGAA\r\n.(((((..(..(((.(((((((...))))))).)))...)..))))).... (-6.00)\r\n\r\n\r\nCall with sequence on command line, mark candidates, report trace\r\narrow and candidate counts (verbose)\r\n----------------------------------------\r\n\r\n$ echo UAACUUAGGGGUUAAAGUUGCAGAUUGUGGCUCUGAAAACACGGGUUCGAA \\\r\n       | SparseMFEFold -m -v\r\nUAACUUAGGGGUUAAAGUUGCAGAUUGUGGCUCUGAAAACACGGGUUCGAA\r\n.[[(((..(..[((.[[[([[[...]]])]]].))]...)..)))]].... (-6.00)\r\n\r\nTA cnt:165\r\nTA max:167\r\nTA av:167\r\nTA rm:6\r\n\r\nCan num:109\r\nCan cap:118\r\nTAs num:165\r\nTAs cap:169\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}